/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { ArticleResponse } from '../models/article-response';
import { delete5 } from '../fn/article/delete-5';
import { Delete5$Params } from '../fn/article/delete-5';
import { findAll8 } from '../fn/article/find-all-8';
import { FindAll8$Params } from '../fn/article/find-all-8';
import { findByCategorieId } from '../fn/article/find-by-categorie-id';
import { FindByCategorieId$Params } from '../fn/article/find-by-categorie-id';
import { findByCode2 } from '../fn/article/find-by-code-2';
import { FindByCode2$Params } from '../fn/article/find-by-code-2';
import { findById8 } from '../fn/article/find-by-id-8';
import { FindById8$Params } from '../fn/article/find-by-id-8';
import { PageResponseArticleResponse } from '../models/page-response-article-response';
import { save8 } from '../fn/article/save-8';
import { Save8$Params } from '../fn/article/save-8';
import { uploadPicture } from '../fn/article/upload-picture';
import { UploadPicture$Params } from '../fn/article/upload-picture';

@Injectable({ providedIn: 'root' })
export class ArticleService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `findAll8()` */
  static readonly FindAll8Path = '/articles';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAll8()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAll8$Response(params?: FindAll8$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseArticleResponse>> {
    return findAll8(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAll8$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAll8(params?: FindAll8$Params, context?: HttpContext): Observable<PageResponseArticleResponse> {
    return this.findAll8$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseArticleResponse>): PageResponseArticleResponse => r.body)
    );
  }

  /** Path part for operation `save8()` */
  static readonly Save8Path = '/articles';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `save8()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  save8$Response(params: Save8$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return save8(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `save8$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  save8(params: Save8$Params, context?: HttpContext): Observable<number> {
    return this.save8$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `uploadPicture()` */
  static readonly UploadPicturePath = '/articles/upload/photo/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `uploadPicture()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  uploadPicture$Response(params: UploadPicture$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return uploadPicture(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `uploadPicture$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  uploadPicture(params: UploadPicture$Params, context?: HttpContext): Observable<{
}> {
    return this.uploadPicture$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `findById8()` */
  static readonly FindById8Path = '/articles/filtre/id/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findById8()` instead.
   *
   * This method doesn't expect any request body.
   */
  findById8$Response(params: FindById8$Params, context?: HttpContext): Observable<StrictHttpResponse<ArticleResponse>> {
    return findById8(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findById8$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findById8(params: FindById8$Params, context?: HttpContext): Observable<ArticleResponse> {
    return this.findById8$Response(params, context).pipe(
      map((r: StrictHttpResponse<ArticleResponse>): ArticleResponse => r.body)
    );
  }

  /** Path part for operation `findByCode2()` */
  static readonly FindByCode2Path = '/articles/filtre/code/{code}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findByCode2()` instead.
   *
   * This method doesn't expect any request body.
   */
  findByCode2$Response(params: FindByCode2$Params, context?: HttpContext): Observable<StrictHttpResponse<ArticleResponse>> {
    return findByCode2(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findByCode2$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findByCode2(params: FindByCode2$Params, context?: HttpContext): Observable<ArticleResponse> {
    return this.findByCode2$Response(params, context).pipe(
      map((r: StrictHttpResponse<ArticleResponse>): ArticleResponse => r.body)
    );
  }

  /** Path part for operation `findByCategorieId()` */
  static readonly FindByCategorieIdPath = '/articles/filtre/categorie/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findByCategorieId()` instead.
   *
   * This method doesn't expect any request body.
   */
  findByCategorieId$Response(params: FindByCategorieId$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseArticleResponse>> {
    return findByCategorieId(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findByCategorieId$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findByCategorieId(params: FindByCategorieId$Params, context?: HttpContext): Observable<PageResponseArticleResponse> {
    return this.findByCategorieId$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseArticleResponse>): PageResponseArticleResponse => r.body)
    );
  }

  /** Path part for operation `delete5()` */
  static readonly Delete5Path = '/articles/delete/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `delete5()` instead.
   *
   * This method doesn't expect any request body.
   */
  delete5$Response(params: Delete5$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return delete5(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `delete5$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  delete5(params: Delete5$Params, context?: HttpContext): Observable<{
}> {
    return this.delete5$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

}
