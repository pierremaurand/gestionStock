/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { delete$ } from '../fn/fournisseur/delete';
import { Delete$Params } from '../fn/fournisseur/delete';
import { findAll4 } from '../fn/fournisseur/find-all-4';
import { FindAll4$Params } from '../fn/fournisseur/find-all-4';
import { findByEmail } from '../fn/fournisseur/find-by-email';
import { FindByEmail$Params } from '../fn/fournisseur/find-by-email';
import { findById2 } from '../fn/fournisseur/find-by-id-2';
import { FindById2$Params } from '../fn/fournisseur/find-by-id-2';
import { findByNumeroCni } from '../fn/fournisseur/find-by-numero-cni';
import { FindByNumeroCni$Params } from '../fn/fournisseur/find-by-numero-cni';
import { findByNumeroTel } from '../fn/fournisseur/find-by-numero-tel';
import { FindByNumeroTel$Params } from '../fn/fournisseur/find-by-numero-tel';
import { FournisseurResponse } from '../models/fournisseur-response';
import { PageResponseFournisseurResponse } from '../models/page-response-fournisseur-response';
import { save4 } from '../fn/fournisseur/save-4';
import { Save4$Params } from '../fn/fournisseur/save-4';
import { uploadPhoto1 } from '../fn/fournisseur/upload-photo-1';
import { UploadPhoto1$Params } from '../fn/fournisseur/upload-photo-1';

@Injectable({ providedIn: 'root' })
export class FournisseurService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `findAll4()` */
  static readonly FindAll4Path = '/fournisseurs';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAll4()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAll4$Response(params?: FindAll4$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseFournisseurResponse>> {
    return findAll4(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAll4$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAll4(params?: FindAll4$Params, context?: HttpContext): Observable<PageResponseFournisseurResponse> {
    return this.findAll4$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseFournisseurResponse>): PageResponseFournisseurResponse => r.body)
    );
  }

  /** Path part for operation `save4()` */
  static readonly Save4Path = '/fournisseurs';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `save4()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  save4$Response(params: Save4$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return save4(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `save4$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  save4(params: Save4$Params, context?: HttpContext): Observable<number> {
    return this.save4$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `uploadPhoto1()` */
  static readonly UploadPhoto1Path = '/fournisseurs/upload/photo/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `uploadPhoto1()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  uploadPhoto1$Response(params: UploadPhoto1$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return uploadPhoto1(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `uploadPhoto1$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  uploadPhoto1(params: UploadPhoto1$Params, context?: HttpContext): Observable<{
}> {
    return this.uploadPhoto1$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `findByNumeroTel()` */
  static readonly FindByNumeroTelPath = '/fournisseurs/numero-tel/{numero-tel}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findByNumeroTel()` instead.
   *
   * This method doesn't expect any request body.
   */
  findByNumeroTel$Response(params: FindByNumeroTel$Params, context?: HttpContext): Observable<StrictHttpResponse<FournisseurResponse>> {
    return findByNumeroTel(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findByNumeroTel$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findByNumeroTel(params: FindByNumeroTel$Params, context?: HttpContext): Observable<FournisseurResponse> {
    return this.findByNumeroTel$Response(params, context).pipe(
      map((r: StrictHttpResponse<FournisseurResponse>): FournisseurResponse => r.body)
    );
  }

  /** Path part for operation `findByNumeroCni()` */
  static readonly FindByNumeroCniPath = '/fournisseurs/numero-cni/{numero-cni}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findByNumeroCni()` instead.
   *
   * This method doesn't expect any request body.
   */
  findByNumeroCni$Response(params: FindByNumeroCni$Params, context?: HttpContext): Observable<StrictHttpResponse<FournisseurResponse>> {
    return findByNumeroCni(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findByNumeroCni$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findByNumeroCni(params: FindByNumeroCni$Params, context?: HttpContext): Observable<FournisseurResponse> {
    return this.findByNumeroCni$Response(params, context).pipe(
      map((r: StrictHttpResponse<FournisseurResponse>): FournisseurResponse => r.body)
    );
  }

  /** Path part for operation `findById2()` */
  static readonly FindById2Path = '/fournisseurs/id/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findById2()` instead.
   *
   * This method doesn't expect any request body.
   */
  findById2$Response(params: FindById2$Params, context?: HttpContext): Observable<StrictHttpResponse<FournisseurResponse>> {
    return findById2(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findById2$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findById2(params: FindById2$Params, context?: HttpContext): Observable<FournisseurResponse> {
    return this.findById2$Response(params, context).pipe(
      map((r: StrictHttpResponse<FournisseurResponse>): FournisseurResponse => r.body)
    );
  }

  /** Path part for operation `findByEmail()` */
  static readonly FindByEmailPath = '/fournisseurs/email/{email}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findByEmail()` instead.
   *
   * This method doesn't expect any request body.
   */
  findByEmail$Response(params: FindByEmail$Params, context?: HttpContext): Observable<StrictHttpResponse<FournisseurResponse>> {
    return findByEmail(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findByEmail$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findByEmail(params: FindByEmail$Params, context?: HttpContext): Observable<FournisseurResponse> {
    return this.findByEmail$Response(params, context).pipe(
      map((r: StrictHttpResponse<FournisseurResponse>): FournisseurResponse => r.body)
    );
  }

  /** Path part for operation `delete()` */
  static readonly DeletePath = '/fournisseurs/delete/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `delete()` instead.
   *
   * This method doesn't expect any request body.
   */
  delete$Response(params: Delete$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return delete$(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `delete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  delete(params: Delete$Params, context?: HttpContext): Observable<{
}> {
    return this.delete$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

}
