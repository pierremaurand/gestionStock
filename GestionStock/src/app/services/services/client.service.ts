/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { ClientResponse } from '../models/client-response';
import { delete3 } from '../fn/client/delete-3';
import { Delete3$Params } from '../fn/client/delete-3';
import { findAll7 } from '../fn/client/find-all-7';
import { FindAll7$Params } from '../fn/client/find-all-7';
import { findByEmail1 } from '../fn/client/find-by-email-1';
import { FindByEmail1$Params } from '../fn/client/find-by-email-1';
import { findById5 } from '../fn/client/find-by-id-5';
import { FindById5$Params } from '../fn/client/find-by-id-5';
import { findByNumeroCni1 } from '../fn/client/find-by-numero-cni-1';
import { FindByNumeroCni1$Params } from '../fn/client/find-by-numero-cni-1';
import { findByNumeroTel1 } from '../fn/client/find-by-numero-tel-1';
import { FindByNumeroTel1$Params } from '../fn/client/find-by-numero-tel-1';
import { PageResponseClientResponse } from '../models/page-response-client-response';
import { saveClient } from '../fn/client/save-client';
import { SaveClient$Params } from '../fn/client/save-client';
import { uploadPhoto2 } from '../fn/client/upload-photo-2';
import { UploadPhoto2$Params } from '../fn/client/upload-photo-2';

@Injectable({ providedIn: 'root' })
export class ClientService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `findAll7()` */
  static readonly FindAll7Path = '/clients';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAll7()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAll7$Response(params?: FindAll7$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseClientResponse>> {
    return findAll7(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAll7$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAll7(params?: FindAll7$Params, context?: HttpContext): Observable<PageResponseClientResponse> {
    return this.findAll7$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseClientResponse>): PageResponseClientResponse => r.body)
    );
  }

  /** Path part for operation `saveClient()` */
  static readonly SaveClientPath = '/clients';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `saveClient()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  saveClient$Response(params: SaveClient$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return saveClient(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `saveClient$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  saveClient(params: SaveClient$Params, context?: HttpContext): Observable<number> {
    return this.saveClient$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `uploadPhoto2()` */
  static readonly UploadPhoto2Path = '/clients/upload/photo/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `uploadPhoto2()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  uploadPhoto2$Response(params: UploadPhoto2$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return uploadPhoto2(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `uploadPhoto2$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  uploadPhoto2(params: UploadPhoto2$Params, context?: HttpContext): Observable<{
}> {
    return this.uploadPhoto2$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `findByNumeroTel1()` */
  static readonly FindByNumeroTel1Path = '/clients/numero-tel/{client-numero-tel}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findByNumeroTel1()` instead.
   *
   * This method doesn't expect any request body.
   */
  findByNumeroTel1$Response(params: FindByNumeroTel1$Params, context?: HttpContext): Observable<StrictHttpResponse<ClientResponse>> {
    return findByNumeroTel1(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findByNumeroTel1$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findByNumeroTel1(params: FindByNumeroTel1$Params, context?: HttpContext): Observable<ClientResponse> {
    return this.findByNumeroTel1$Response(params, context).pipe(
      map((r: StrictHttpResponse<ClientResponse>): ClientResponse => r.body)
    );
  }

  /** Path part for operation `findByNumeroCni1()` */
  static readonly FindByNumeroCni1Path = '/clients/numero-cni/{client-numero-cni}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findByNumeroCni1()` instead.
   *
   * This method doesn't expect any request body.
   */
  findByNumeroCni1$Response(params: FindByNumeroCni1$Params, context?: HttpContext): Observable<StrictHttpResponse<ClientResponse>> {
    return findByNumeroCni1(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findByNumeroCni1$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findByNumeroCni1(params: FindByNumeroCni1$Params, context?: HttpContext): Observable<ClientResponse> {
    return this.findByNumeroCni1$Response(params, context).pipe(
      map((r: StrictHttpResponse<ClientResponse>): ClientResponse => r.body)
    );
  }

  /** Path part for operation `findById5()` */
  static readonly FindById5Path = '/clients/id/{client-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findById5()` instead.
   *
   * This method doesn't expect any request body.
   */
  findById5$Response(params: FindById5$Params, context?: HttpContext): Observable<StrictHttpResponse<ClientResponse>> {
    return findById5(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findById5$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findById5(params: FindById5$Params, context?: HttpContext): Observable<ClientResponse> {
    return this.findById5$Response(params, context).pipe(
      map((r: StrictHttpResponse<ClientResponse>): ClientResponse => r.body)
    );
  }

  /** Path part for operation `findByEmail1()` */
  static readonly FindByEmail1Path = '/clients/email/{client-email}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findByEmail1()` instead.
   *
   * This method doesn't expect any request body.
   */
  findByEmail1$Response(params: FindByEmail1$Params, context?: HttpContext): Observable<StrictHttpResponse<ClientResponse>> {
    return findByEmail1(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findByEmail1$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findByEmail1(params: FindByEmail1$Params, context?: HttpContext): Observable<ClientResponse> {
    return this.findByEmail1$Response(params, context).pipe(
      map((r: StrictHttpResponse<ClientResponse>): ClientResponse => r.body)
    );
  }

  /** Path part for operation `delete3()` */
  static readonly Delete3Path = '/clients/delete/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `delete3()` instead.
   *
   * This method doesn't expect any request body.
   */
  delete3$Response(params: Delete3$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return delete3(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `delete3$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  delete3(params: Delete3$Params, context?: HttpContext): Observable<{
}> {
    return this.delete3$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

}
