/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { findAll3 } from '../fn/mouvement-stock/find-all-3';
import { FindAll3$Params } from '../fn/mouvement-stock/find-all-3';
import { findAllByArticle } from '../fn/mouvement-stock/find-all-by-article';
import { FindAllByArticle$Params } from '../fn/mouvement-stock/find-all-by-article';
import { getStockReelByArticle } from '../fn/mouvement-stock/get-stock-reel-by-article';
import { GetStockReelByArticle$Params } from '../fn/mouvement-stock/get-stock-reel-by-article';
import { PageResponseMouvementStockResponse } from '../models/page-response-mouvement-stock-response';
import { save3 } from '../fn/mouvement-stock/save-3';
import { Save3$Params } from '../fn/mouvement-stock/save-3';

@Injectable({ providedIn: 'root' })
export class MouvementStockService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `findAll3()` */
  static readonly FindAll3Path = '/mouvements-stock';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAll3()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAll3$Response(params?: FindAll3$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseMouvementStockResponse>> {
    return findAll3(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAll3$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAll3(params?: FindAll3$Params, context?: HttpContext): Observable<PageResponseMouvementStockResponse> {
    return this.findAll3$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseMouvementStockResponse>): PageResponseMouvementStockResponse => r.body)
    );
  }

  /** Path part for operation `save3()` */
  static readonly Save3Path = '/mouvements-stock';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `save3()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  save3$Response(params: Save3$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return save3(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `save3$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  save3(params: Save3$Params, context?: HttpContext): Observable<number> {
    return this.save3$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `findAllByArticle()` */
  static readonly FindAllByArticlePath = '/mouvements-stock/article/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAllByArticle()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllByArticle$Response(params: FindAllByArticle$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseMouvementStockResponse>> {
    return findAllByArticle(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAllByArticle$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllByArticle(params: FindAllByArticle$Params, context?: HttpContext): Observable<PageResponseMouvementStockResponse> {
    return this.findAllByArticle$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseMouvementStockResponse>): PageResponseMouvementStockResponse => r.body)
    );
  }

  /** Path part for operation `getStockReelByArticle()` */
  static readonly GetStockReelByArticlePath = '/mouvements-stock/article/stock-reel/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getStockReelByArticle()` instead.
   *
   * This method doesn't expect any request body.
   */
  getStockReelByArticle$Response(params: GetStockReelByArticle$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return getStockReelByArticle(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getStockReelByArticle$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getStockReelByArticle(params: GetStockReelByArticle$Params, context?: HttpContext): Observable<number> {
    return this.getStockReelByArticle$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

}
