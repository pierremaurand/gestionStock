/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { CommandeFournisseurResponse } from '../models/commande-fournisseur-response';
import { delete1 } from '../fn/commande-fournisseur/delete-1';
import { Delete1$Params } from '../fn/commande-fournisseur/delete-1';
import { deleteLigneCommande } from '../fn/commande-fournisseur/delete-ligne-commande';
import { DeleteLigneCommande$Params } from '../fn/commande-fournisseur/delete-ligne-commande';
import { findAll5 } from '../fn/commande-fournisseur/find-all-5';
import { FindAll5$Params } from '../fn/commande-fournisseur/find-all-5';
import { findByCode } from '../fn/commande-fournisseur/find-by-code';
import { FindByCode$Params } from '../fn/commande-fournisseur/find-by-code';
import { findById3 } from '../fn/commande-fournisseur/find-by-id-3';
import { FindById3$Params } from '../fn/commande-fournisseur/find-by-id-3';
import { findLignesCommandeFournisseurByArticle } from '../fn/commande-fournisseur/find-lignes-commande-fournisseur-by-article';
import { FindLignesCommandeFournisseurByArticle$Params } from '../fn/commande-fournisseur/find-lignes-commande-fournisseur-by-article';
import { findLignesCommandeFournisseurByCommandeFournisseur } from '../fn/commande-fournisseur/find-lignes-commande-fournisseur-by-commande-fournisseur';
import { FindLignesCommandeFournisseurByCommandeFournisseur$Params } from '../fn/commande-fournisseur/find-lignes-commande-fournisseur-by-commande-fournisseur';
import { PageResponseCommandeFournisseurResponse } from '../models/page-response-commande-fournisseur-response';
import { PageResponseLigneCommandeFournisseurResponse } from '../models/page-response-ligne-commande-fournisseur-response';
import { save5 } from '../fn/commande-fournisseur/save-5';
import { Save5$Params } from '../fn/commande-fournisseur/save-5';
import { updateArticle } from '../fn/commande-fournisseur/update-article';
import { UpdateArticle$Params } from '../fn/commande-fournisseur/update-article';
import { updateDateCommande } from '../fn/commande-fournisseur/update-date-commande';
import { UpdateDateCommande$Params } from '../fn/commande-fournisseur/update-date-commande';
import { updateEtat } from '../fn/commande-fournisseur/update-etat';
import { UpdateEtat$Params } from '../fn/commande-fournisseur/update-etat';
import { updateFournisseur } from '../fn/commande-fournisseur/update-fournisseur';
import { UpdateFournisseur$Params } from '../fn/commande-fournisseur/update-fournisseur';
import { updateQuantite } from '../fn/commande-fournisseur/update-quantite';
import { UpdateQuantite$Params } from '../fn/commande-fournisseur/update-quantite';

@Injectable({ providedIn: 'root' })
export class CommandeFournisseurService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `findAll5()` */
  static readonly FindAll5Path = '/commandes-fournisseur';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAll5()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAll5$Response(params?: FindAll5$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseCommandeFournisseurResponse>> {
    return findAll5(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAll5$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAll5(params?: FindAll5$Params, context?: HttpContext): Observable<PageResponseCommandeFournisseurResponse> {
    return this.findAll5$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseCommandeFournisseurResponse>): PageResponseCommandeFournisseurResponse => r.body)
    );
  }

  /** Path part for operation `save5()` */
  static readonly Save5Path = '/commandes-fournisseur';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `save5()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  save5$Response(params: Save5$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return save5(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `save5$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  save5(params: Save5$Params, context?: HttpContext): Observable<number> {
    return this.save5$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `updateQuantite()` */
  static readonly UpdateQuantitePath = '/commandes-fournisseur/lignes-commande/quantite/update';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateQuantite()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateQuantite$Response(params: UpdateQuantite$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return updateQuantite(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateQuantite$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateQuantite(params: UpdateQuantite$Params, context?: HttpContext): Observable<number> {
    return this.updateQuantite$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `updateArticle()` */
  static readonly UpdateArticlePath = '/commandes-fournisseur/lignes-commande/article/update';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateArticle()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateArticle$Response(params: UpdateArticle$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return updateArticle(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateArticle$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateArticle(params: UpdateArticle$Params, context?: HttpContext): Observable<number> {
    return this.updateArticle$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `updateFournisseur()` */
  static readonly UpdateFournisseurPath = '/commandes-fournisseur/fournisseur/update';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateFournisseur()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateFournisseur$Response(params: UpdateFournisseur$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return updateFournisseur(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateFournisseur$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateFournisseur(params: UpdateFournisseur$Params, context?: HttpContext): Observable<number> {
    return this.updateFournisseur$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `updateEtat()` */
  static readonly UpdateEtatPath = '/commandes-fournisseur/etat/update';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateEtat()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateEtat$Response(params: UpdateEtat$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return updateEtat(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateEtat$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateEtat(params: UpdateEtat$Params, context?: HttpContext): Observable<number> {
    return this.updateEtat$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `updateDateCommande()` */
  static readonly UpdateDateCommandePath = '/commandes-fournisseur/date-commande/update';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateDateCommande()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateDateCommande$Response(params: UpdateDateCommande$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return updateDateCommande(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateDateCommande$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateDateCommande(params: UpdateDateCommande$Params, context?: HttpContext): Observable<number> {
    return this.updateDateCommande$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `findLignesCommandeFournisseurByCommandeFournisseur()` */
  static readonly FindLignesCommandeFournisseurByCommandeFournisseurPath = '/commandes-fournisseur/lignes-commande/commande-fournisseur/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findLignesCommandeFournisseurByCommandeFournisseur()` instead.
   *
   * This method doesn't expect any request body.
   */
  findLignesCommandeFournisseurByCommandeFournisseur$Response(params: FindLignesCommandeFournisseurByCommandeFournisseur$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseLigneCommandeFournisseurResponse>> {
    return findLignesCommandeFournisseurByCommandeFournisseur(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findLignesCommandeFournisseurByCommandeFournisseur$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findLignesCommandeFournisseurByCommandeFournisseur(params: FindLignesCommandeFournisseurByCommandeFournisseur$Params, context?: HttpContext): Observable<PageResponseLigneCommandeFournisseurResponse> {
    return this.findLignesCommandeFournisseurByCommandeFournisseur$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseLigneCommandeFournisseurResponse>): PageResponseLigneCommandeFournisseurResponse => r.body)
    );
  }

  /** Path part for operation `findLignesCommandeFournisseurByArticle()` */
  static readonly FindLignesCommandeFournisseurByArticlePath = '/commandes-fournisseur/lignes-commande/article/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findLignesCommandeFournisseurByArticle()` instead.
   *
   * This method doesn't expect any request body.
   */
  findLignesCommandeFournisseurByArticle$Response(params: FindLignesCommandeFournisseurByArticle$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseLigneCommandeFournisseurResponse>> {
    return findLignesCommandeFournisseurByArticle(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findLignesCommandeFournisseurByArticle$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findLignesCommandeFournisseurByArticle(params: FindLignesCommandeFournisseurByArticle$Params, context?: HttpContext): Observable<PageResponseLigneCommandeFournisseurResponse> {
    return this.findLignesCommandeFournisseurByArticle$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseLigneCommandeFournisseurResponse>): PageResponseLigneCommandeFournisseurResponse => r.body)
    );
  }

  /** Path part for operation `findById3()` */
  static readonly FindById3Path = '/commandes-fournisseur/id/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findById3()` instead.
   *
   * This method doesn't expect any request body.
   */
  findById3$Response(params: FindById3$Params, context?: HttpContext): Observable<StrictHttpResponse<CommandeFournisseurResponse>> {
    return findById3(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findById3$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findById3(params: FindById3$Params, context?: HttpContext): Observable<CommandeFournisseurResponse> {
    return this.findById3$Response(params, context).pipe(
      map((r: StrictHttpResponse<CommandeFournisseurResponse>): CommandeFournisseurResponse => r.body)
    );
  }

  /** Path part for operation `findByCode()` */
  static readonly FindByCodePath = '/commandes-fournisseur/code/{code}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findByCode()` instead.
   *
   * This method doesn't expect any request body.
   */
  findByCode$Response(params: FindByCode$Params, context?: HttpContext): Observable<StrictHttpResponse<CommandeFournisseurResponse>> {
    return findByCode(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findByCode$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findByCode(params: FindByCode$Params, context?: HttpContext): Observable<CommandeFournisseurResponse> {
    return this.findByCode$Response(params, context).pipe(
      map((r: StrictHttpResponse<CommandeFournisseurResponse>): CommandeFournisseurResponse => r.body)
    );
  }

  /** Path part for operation `deleteLigneCommande()` */
  static readonly DeleteLigneCommandePath = '/commandes-fournisseur/lignes-commande/delete';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteLigneCommande()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  deleteLigneCommande$Response(params: DeleteLigneCommande$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return deleteLigneCommande(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteLigneCommande$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  deleteLigneCommande(params: DeleteLigneCommande$Params, context?: HttpContext): Observable<number> {
    return this.deleteLigneCommande$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `delete1()` */
  static readonly Delete1Path = '/commandes-fournisseur/delete/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `delete1()` instead.
   *
   * This method doesn't expect any request body.
   */
  delete1$Response(params: Delete1$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return delete1(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `delete1$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  delete1(params: Delete1$Params, context?: HttpContext): Observable<{
}> {
    return this.delete1$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

}
