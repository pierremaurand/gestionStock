/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { CommandeClientResponse } from '../models/commande-client-response';
import { delete2 } from '../fn/commande-client/delete-2';
import { Delete2$Params } from '../fn/commande-client/delete-2';
import { deleteLigneCommande1 } from '../fn/commande-client/delete-ligne-commande-1';
import { DeleteLigneCommande1$Params } from '../fn/commande-client/delete-ligne-commande-1';
import { findAll6 } from '../fn/commande-client/find-all-6';
import { FindAll6$Params } from '../fn/commande-client/find-all-6';
import { findByCode1 } from '../fn/commande-client/find-by-code-1';
import { FindByCode1$Params } from '../fn/commande-client/find-by-code-1';
import { findById4 } from '../fn/commande-client/find-by-id-4';
import { FindById4$Params } from '../fn/commande-client/find-by-id-4';
import { findLignesCommandeClient } from '../fn/commande-client/find-lignes-commande-client';
import { FindLignesCommandeClient$Params } from '../fn/commande-client/find-lignes-commande-client';
import { findLignesCommandeClientByArticle } from '../fn/commande-client/find-lignes-commande-client-by-article';
import { FindLignesCommandeClientByArticle$Params } from '../fn/commande-client/find-lignes-commande-client-by-article';
import { findLignesCommandeClientByCommandeClient } from '../fn/commande-client/find-lignes-commande-client-by-commande-client';
import { FindLignesCommandeClientByCommandeClient$Params } from '../fn/commande-client/find-lignes-commande-client-by-commande-client';
import { PageResponseCommandeClientResponse } from '../models/page-response-commande-client-response';
import { PageResponseLigneCommandeClientResponse } from '../models/page-response-ligne-commande-client-response';
import { save6 } from '../fn/commande-client/save-6';
import { Save6$Params } from '../fn/commande-client/save-6';
import { updateArticle1 } from '../fn/commande-client/update-article-1';
import { UpdateArticle1$Params } from '../fn/commande-client/update-article-1';
import { updateClient } from '../fn/commande-client/update-client';
import { UpdateClient$Params } from '../fn/commande-client/update-client';
import { updateDateCommande1 } from '../fn/commande-client/update-date-commande-1';
import { UpdateDateCommande1$Params } from '../fn/commande-client/update-date-commande-1';
import { updateEtat1 } from '../fn/commande-client/update-etat-1';
import { UpdateEtat1$Params } from '../fn/commande-client/update-etat-1';
import { updateQuantite1 } from '../fn/commande-client/update-quantite-1';
import { UpdateQuantite1$Params } from '../fn/commande-client/update-quantite-1';

@Injectable({ providedIn: 'root' })
export class CommandeClientService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `findAll6()` */
  static readonly FindAll6Path = '/commandes-client';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAll6()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAll6$Response(params?: FindAll6$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseCommandeClientResponse>> {
    return findAll6(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAll6$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAll6(params?: FindAll6$Params, context?: HttpContext): Observable<PageResponseCommandeClientResponse> {
    return this.findAll6$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseCommandeClientResponse>): PageResponseCommandeClientResponse => r.body)
    );
  }

  /** Path part for operation `save6()` */
  static readonly Save6Path = '/commandes-client';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `save6()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  save6$Response(params: Save6$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return save6(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `save6$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  save6(params: Save6$Params, context?: HttpContext): Observable<number> {
    return this.save6$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `updateQuantite1()` */
  static readonly UpdateQuantite1Path = '/commandes-client/lignes-commande/quantite/update';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateQuantite1()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateQuantite1$Response(params: UpdateQuantite1$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return updateQuantite1(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateQuantite1$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateQuantite1(params: UpdateQuantite1$Params, context?: HttpContext): Observable<number> {
    return this.updateQuantite1$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `updateArticle1()` */
  static readonly UpdateArticle1Path = '/commandes-client/lignes-commande/article/update';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateArticle1()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateArticle1$Response(params: UpdateArticle1$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return updateArticle1(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateArticle1$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateArticle1(params: UpdateArticle1$Params, context?: HttpContext): Observable<number> {
    return this.updateArticle1$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `updateEtat1()` */
  static readonly UpdateEtat1Path = '/commandes-client/etat/update';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateEtat1()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateEtat1$Response(params: UpdateEtat1$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return updateEtat1(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateEtat1$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateEtat1(params: UpdateEtat1$Params, context?: HttpContext): Observable<number> {
    return this.updateEtat1$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `updateDateCommande1()` */
  static readonly UpdateDateCommande1Path = '/commandes-client/date-commande/update';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateDateCommande1()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateDateCommande1$Response(params: UpdateDateCommande1$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return updateDateCommande1(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateDateCommande1$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateDateCommande1(params: UpdateDateCommande1$Params, context?: HttpContext): Observable<number> {
    return this.updateDateCommande1$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `updateClient()` */
  static readonly UpdateClientPath = '/commandes-client/client/update';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateClient()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateClient$Response(params: UpdateClient$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return updateClient(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateClient$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateClient(params: UpdateClient$Params, context?: HttpContext): Observable<number> {
    return this.updateClient$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `findLignesCommandeClient()` */
  static readonly FindLignesCommandeClientPath = '/commandes-client/lignes-commande';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findLignesCommandeClient()` instead.
   *
   * This method doesn't expect any request body.
   */
  findLignesCommandeClient$Response(params?: FindLignesCommandeClient$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseLigneCommandeClientResponse>> {
    return findLignesCommandeClient(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findLignesCommandeClient$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findLignesCommandeClient(params?: FindLignesCommandeClient$Params, context?: HttpContext): Observable<PageResponseLigneCommandeClientResponse> {
    return this.findLignesCommandeClient$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseLigneCommandeClientResponse>): PageResponseLigneCommandeClientResponse => r.body)
    );
  }

  /** Path part for operation `findLignesCommandeClientByCommandeClient()` */
  static readonly FindLignesCommandeClientByCommandeClientPath = '/commandes-client/lignes-commande/commande-client/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findLignesCommandeClientByCommandeClient()` instead.
   *
   * This method doesn't expect any request body.
   */
  findLignesCommandeClientByCommandeClient$Response(params: FindLignesCommandeClientByCommandeClient$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseLigneCommandeClientResponse>> {
    return findLignesCommandeClientByCommandeClient(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findLignesCommandeClientByCommandeClient$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findLignesCommandeClientByCommandeClient(params: FindLignesCommandeClientByCommandeClient$Params, context?: HttpContext): Observable<PageResponseLigneCommandeClientResponse> {
    return this.findLignesCommandeClientByCommandeClient$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseLigneCommandeClientResponse>): PageResponseLigneCommandeClientResponse => r.body)
    );
  }

  /** Path part for operation `findLignesCommandeClientByArticle()` */
  static readonly FindLignesCommandeClientByArticlePath = '/commandes-client/lignes-commande/article/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findLignesCommandeClientByArticle()` instead.
   *
   * This method doesn't expect any request body.
   */
  findLignesCommandeClientByArticle$Response(params: FindLignesCommandeClientByArticle$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseLigneCommandeClientResponse>> {
    return findLignesCommandeClientByArticle(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findLignesCommandeClientByArticle$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findLignesCommandeClientByArticle(params: FindLignesCommandeClientByArticle$Params, context?: HttpContext): Observable<PageResponseLigneCommandeClientResponse> {
    return this.findLignesCommandeClientByArticle$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseLigneCommandeClientResponse>): PageResponseLigneCommandeClientResponse => r.body)
    );
  }

  /** Path part for operation `findById4()` */
  static readonly FindById4Path = '/commandes-client/id/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findById4()` instead.
   *
   * This method doesn't expect any request body.
   */
  findById4$Response(params: FindById4$Params, context?: HttpContext): Observable<StrictHttpResponse<CommandeClientResponse>> {
    return findById4(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findById4$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findById4(params: FindById4$Params, context?: HttpContext): Observable<CommandeClientResponse> {
    return this.findById4$Response(params, context).pipe(
      map((r: StrictHttpResponse<CommandeClientResponse>): CommandeClientResponse => r.body)
    );
  }

  /** Path part for operation `findByCode1()` */
  static readonly FindByCode1Path = '/commandes-client/code/{code}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findByCode1()` instead.
   *
   * This method doesn't expect any request body.
   */
  findByCode1$Response(params: FindByCode1$Params, context?: HttpContext): Observable<StrictHttpResponse<CommandeClientResponse>> {
    return findByCode1(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findByCode1$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findByCode1(params: FindByCode1$Params, context?: HttpContext): Observable<CommandeClientResponse> {
    return this.findByCode1$Response(params, context).pipe(
      map((r: StrictHttpResponse<CommandeClientResponse>): CommandeClientResponse => r.body)
    );
  }

  /** Path part for operation `deleteLigneCommande1()` */
  static readonly DeleteLigneCommande1Path = '/commandes-client/lignes-commande/delete';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteLigneCommande1()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  deleteLigneCommande1$Response(params: DeleteLigneCommande1$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return deleteLigneCommande1(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteLigneCommande1$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  deleteLigneCommande1(params: DeleteLigneCommande1$Params, context?: HttpContext): Observable<number> {
    return this.deleteLigneCommande1$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `delete2()` */
  static readonly Delete2Path = '/commandes-client/delete/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `delete2()` instead.
   *
   * This method doesn't expect any request body.
   */
  delete2$Response(params: Delete2$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return delete2(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `delete2$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  delete2(params: Delete2$Params, context?: HttpContext): Observable<{
}> {
    return this.delete2$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

}
