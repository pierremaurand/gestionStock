/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { changePassword } from '../fn/utilisateur/change-password';
import { ChangePassword$Params } from '../fn/utilisateur/change-password';
import { findAll1 } from '../fn/utilisateur/find-all-1';
import { FindAll1$Params } from '../fn/utilisateur/find-all-1';
import { findById } from '../fn/utilisateur/find-by-id';
import { FindById$Params } from '../fn/utilisateur/find-by-id';
import { findByLogin } from '../fn/utilisateur/find-by-login';
import { FindByLogin$Params } from '../fn/utilisateur/find-by-login';
import { PageResponseUtilisateurResponse } from '../models/page-response-utilisateur-response';
import { save1 } from '../fn/utilisateur/save-1';
import { Save1$Params } from '../fn/utilisateur/save-1';
import { uploadPhoto } from '../fn/utilisateur/upload-photo';
import { UploadPhoto$Params } from '../fn/utilisateur/upload-photo';
import { UtilisateurResponse } from '../models/utilisateur-response';

@Injectable({ providedIn: 'root' })
export class UtilisateurService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `findAll1()` */
  static readonly FindAll1Path = '/utilisateurs';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAll1()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAll1$Response(params?: FindAll1$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseUtilisateurResponse>> {
    return findAll1(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAll1$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAll1(params?: FindAll1$Params, context?: HttpContext): Observable<PageResponseUtilisateurResponse> {
    return this.findAll1$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseUtilisateurResponse>): PageResponseUtilisateurResponse => r.body)
    );
  }

  /** Path part for operation `save1()` */
  static readonly Save1Path = '/utilisateurs';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `save1()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  save1$Response(params: Save1$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return save1(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `save1$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  save1(params: Save1$Params, context?: HttpContext): Observable<number> {
    return this.save1$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `uploadPhoto()` */
  static readonly UploadPhotoPath = '/utilisateurs/photo/upload/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `uploadPhoto()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  uploadPhoto$Response(params: UploadPhoto$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return uploadPhoto(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `uploadPhoto$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  uploadPhoto(params: UploadPhoto$Params, context?: HttpContext): Observable<{
}> {
    return this.uploadPhoto$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `changePassword()` */
  static readonly ChangePasswordPath = '/utilisateurs/mot-de-passe/update';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `changePassword()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  changePassword$Response(params: ChangePassword$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return changePassword(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `changePassword$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  changePassword(params: ChangePassword$Params, context?: HttpContext): Observable<number> {
    return this.changePassword$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `findByLogin()` */
  static readonly FindByLoginPath = '/utilisateurs/login/{login}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findByLogin()` instead.
   *
   * This method doesn't expect any request body.
   */
  findByLogin$Response(params: FindByLogin$Params, context?: HttpContext): Observable<StrictHttpResponse<UtilisateurResponse>> {
    return findByLogin(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findByLogin$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findByLogin(params: FindByLogin$Params, context?: HttpContext): Observable<UtilisateurResponse> {
    return this.findByLogin$Response(params, context).pipe(
      map((r: StrictHttpResponse<UtilisateurResponse>): UtilisateurResponse => r.body)
    );
  }

  /** Path part for operation `findById()` */
  static readonly FindByIdPath = '/utilisateurs/id/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findById()` instead.
   *
   * This method doesn't expect any request body.
   */
  findById$Response(params: FindById$Params, context?: HttpContext): Observable<StrictHttpResponse<UtilisateurResponse>> {
    return findById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findById(params: FindById$Params, context?: HttpContext): Observable<UtilisateurResponse> {
    return this.findById$Response(params, context).pipe(
      map((r: StrictHttpResponse<UtilisateurResponse>): UtilisateurResponse => r.body)
    );
  }

}
