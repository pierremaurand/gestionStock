/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { changeName } from '../fn/role/change-name';
import { ChangeName$Params } from '../fn/role/change-name';
import { findAll2 } from '../fn/role/find-all-2';
import { FindAll2$Params } from '../fn/role/find-all-2';
import { findById1 } from '../fn/role/find-by-id-1';
import { FindById1$Params } from '../fn/role/find-by-id-1';
import { findByName } from '../fn/role/find-by-name';
import { FindByName$Params } from '../fn/role/find-by-name';
import { PageResponseRoleResponse } from '../models/page-response-role-response';
import { RoleResponse } from '../models/role-response';
import { save2 } from '../fn/role/save-2';
import { Save2$Params } from '../fn/role/save-2';

@Injectable({ providedIn: 'root' })
export class RoleService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `findAll2()` */
  static readonly FindAll2Path = '/roles';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAll2()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAll2$Response(params?: FindAll2$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseRoleResponse>> {
    return findAll2(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAll2$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAll2(params?: FindAll2$Params, context?: HttpContext): Observable<PageResponseRoleResponse> {
    return this.findAll2$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseRoleResponse>): PageResponseRoleResponse => r.body)
    );
  }

  /** Path part for operation `save2()` */
  static readonly Save2Path = '/roles';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `save2()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  save2$Response(params: Save2$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return save2(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `save2$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  save2(params: Save2$Params, context?: HttpContext): Observable<number> {
    return this.save2$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `changeName()` */
  static readonly ChangeNamePath = '/roles/update/name';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `changeName()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  changeName$Response(params: ChangeName$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return changeName(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `changeName$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  changeName(params: ChangeName$Params, context?: HttpContext): Observable<number> {
    return this.changeName$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `findByName()` */
  static readonly FindByNamePath = '/roles/filtre/name/{role-name}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findByName()` instead.
   *
   * This method doesn't expect any request body.
   */
  findByName$Response(params: FindByName$Params, context?: HttpContext): Observable<StrictHttpResponse<RoleResponse>> {
    return findByName(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findByName$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findByName(params: FindByName$Params, context?: HttpContext): Observable<RoleResponse> {
    return this.findByName$Response(params, context).pipe(
      map((r: StrictHttpResponse<RoleResponse>): RoleResponse => r.body)
    );
  }

  /** Path part for operation `findById1()` */
  static readonly FindById1Path = '/roles/filtre/id/{role-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findById1()` instead.
   *
   * This method doesn't expect any request body.
   */
  findById1$Response(params: FindById1$Params, context?: HttpContext): Observable<StrictHttpResponse<RoleResponse>> {
    return findById1(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findById1$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findById1(params: FindById1$Params, context?: HttpContext): Observable<RoleResponse> {
    return this.findById1$Response(params, context).pipe(
      map((r: StrictHttpResponse<RoleResponse>): RoleResponse => r.body)
    );
  }

}
