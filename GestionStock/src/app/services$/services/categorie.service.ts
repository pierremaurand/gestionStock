/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { CategorieResponse } from '../models/categorie-response';
import { delete4 } from '../fn/categorie/delete-4';
import { Delete4$Params } from '../fn/categorie/delete-4';
import { findAllCategories } from '../fn/categorie/find-all-categories';
import { FindAllCategories$Params } from '../fn/categorie/find-all-categories';
import { findById6 } from '../fn/categorie/find-by-id-6';
import { FindById6$Params } from '../fn/categorie/find-by-id-6';
import { findById7 } from '../fn/categorie/find-by-id-7';
import { FindById7$Params } from '../fn/categorie/find-by-id-7';
import { PageResponseCategorieResponse } from '../models/page-response-categorie-response';
import { save7 } from '../fn/categorie/save-7';
import { Save7$Params } from '../fn/categorie/save-7';

@Injectable({ providedIn: 'root' })
export class CategorieService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `findAllCategories()` */
  static readonly FindAllCategoriesPath = '/categories';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAllCategories()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllCategories$Response(params?: FindAllCategories$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseCategorieResponse>> {
    return findAllCategories(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAllCategories$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllCategories(params?: FindAllCategories$Params, context?: HttpContext): Observable<PageResponseCategorieResponse> {
    return this.findAllCategories$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseCategorieResponse>): PageResponseCategorieResponse => r.body)
    );
  }

  /** Path part for operation `save7()` */
  static readonly Save7Path = '/categories';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `save7()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  save7$Response(params: Save7$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return save7(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `save7$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  save7(params: Save7$Params, context?: HttpContext): Observable<number> {
    return this.save7$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `findById6()` */
  static readonly FindById6Path = '/categories/id/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findById6()` instead.
   *
   * This method doesn't expect any request body.
   */
  findById6$Response(params: FindById6$Params, context?: HttpContext): Observable<StrictHttpResponse<CategorieResponse>> {
    return findById6(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findById6$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findById6(params: FindById6$Params, context?: HttpContext): Observable<CategorieResponse> {
    return this.findById6$Response(params, context).pipe(
      map((r: StrictHttpResponse<CategorieResponse>): CategorieResponse => r.body)
    );
  }

  /** Path part for operation `findById7()` */
  static readonly FindById7Path = '/categories/code/{code}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findById7()` instead.
   *
   * This method doesn't expect any request body.
   */
  findById7$Response(params: FindById7$Params, context?: HttpContext): Observable<StrictHttpResponse<CategorieResponse>> {
    return findById7(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findById7$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findById7(params: FindById7$Params, context?: HttpContext): Observable<CategorieResponse> {
    return this.findById7$Response(params, context).pipe(
      map((r: StrictHttpResponse<CategorieResponse>): CategorieResponse => r.body)
    );
  }

  /** Path part for operation `delete4()` */
  static readonly Delete4Path = '/categories/delete/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `delete4()` instead.
   *
   * This method doesn't expect any request body.
   */
  delete4$Response(params: Delete4$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return delete4(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `delete4$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  delete4(params: Delete4$Params, context?: HttpContext): Observable<{
}> {
    return this.delete4$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

}
